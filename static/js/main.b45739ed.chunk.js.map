{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["wrapperStyles","width","maxWidth","margin","AlbersUSA","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleStateClick","bind","assertThisInitialized","statesNames","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","state","dataSet","stateName","highScore","currentScore","randomState","Math","floor","random","previousRandomState","event","setState","previousCorrectState","document","getElementById","concat","classList","remove","add","_this2","path","population","location","pathname","directory","substring","indexOf","lastIndexOf","console","log","react_default","a","createElement","style","className","lib","projection","projectionConfig","scale","height","disablePanning","geography","disableOptimization","geographies","map","i","id","properties","ID_1","key","cacheId","round","onClick","e","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b45739ed.chunk.js","sourcesContent":["\nimport React, { Component } from \"react\"\nimport \"./App.css\"\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\"\n\n\n\n\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\",\n\n}\n\nclass AlbersUSA extends Component {\n  constructor(props) {\n    super(props)\n\n    this.handleStateClick = this.handleStateClick.bind(this);\n    this.statesNames = {0:'Alabama',1:'Alaska',2:'Arizona',3:'Arkansas',4:'California',5:'Colorado',6:'Connecticut',7:'Delaware',\n    8:'Florida',9:'Georgia',10:'Hawaii',11:'Idaho',12:'Illinois',13:'Indiana',14:'Iowa',15:'Kansas',16:'Kentucky',17:'Louisiana',18:'Maine',19:'Maryland',\n    20:'Massachusetts',21:'Michigan',22:'Minnesota',23:'Mississippi',24:'Missouri',25:'Montana',26:'Nebraska',27:'Nevada',28:'New Hampshire',\n    29: 'New Jersey',30:'New Mexico',31:'New York',32:'North Carolina',33:'North Dakota',34:'Ohio',35:'Oklahoma',36:'Oregon',37:'Pennsylvania',\n    38:'Rhode Island',39:'South Carolina',40:'South Dakota',41:'Tennessee',42:'Texas',43:'Utah',44:'Vermont',45:'Virginia',46:'Washington',\n    47:'West Virginia',48:'Wisconsin',49:'Wyoming'};\n\n\n    this.state = {\n      dataSet: '',\n      stateName: '',\n      highScore: 0,\n      currentScore: 0,\n      randomState: Math.floor(Math.random()*(49-0+1)),\n      previousRandomState: -1\n\n    }\n  }\n\n    handleStateClick(event, state){\n\n    let currentScore = this.state.currentScore;\n        if(this.state.randomState == state){\n        currentScore = currentScore + 1;\n            this.setState({currentScore: currentScore});\n            if(currentScore>this.state.highScore){\n                    this.setState({highScore: currentScore});\n                    }\n        }\n        else{\n            if(currentScore>this.state.highScore){\n                this.setState({highScore: currentScore,\n                       currentScore: 0});\n             }\n            else{\n                 this.setState({currentScore: 0});\n                 }\n        }\n        var previousCorrectState = document.getElementById(`state-${this.state.previousRandomState}`);\n        if(previousCorrectState != null){\n            previousCorrectState.classList.remove(\"correct-state\");\n        }\n\n        var correctState = document.getElementById(`state-${this.state.randomState}`);\n        correctState.classList.add(\"correct-state\");\n\n        //Select random state\n        this.setState({randomState: Math.floor(Math.random()*(49-0+1)),\n                        previousRandomState: this.state.randomState});\n    }\n  render() {\n    const { population } = this.state;\n        var path = document.location.pathname;\n        var directory = path.substring(path.indexOf('/'), path.lastIndexOf('/'));\n        console.log(path);\n        console.log(directory);\n\n\n    return (\n      <div style={wrapperStyles}>\n       <div className=\"title-name\">Guess The State!</div>\n       <div className=\"random-state-name\">Find - {this.statesNames[this.state.randomState]}</div>\n        <ComposableMap\n          projection=\"albersUsa\"\n          projectionConfig={{\n            scale: 1000,\n          }}\n          width={980}\n          height={551}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n          }}\n          >\n          <ZoomableGroup disablePanning>\n            <Geographies geography=\"/US-State-Game/us.json\" disableOptimization>\n              {(geographies, projection) =>\n                geographies.map((geography, i) => {\n                  return (\n                    <Geography\n                      id={`state-${geography.properties.ID_1 -1}`}\n                      key={`state-${geography.properties.ID_1 -1}`}\n                      cacheId={`state-${geography.properties.ID_1 -1}`}\n                      round\n                      geography={geography}\n                      projection={projection}\n                      onClick={(e) => this.handleStateClick(e, geography.properties.ID_1 -1)}\n                    >\n                       </Geography>\n                  )\n                }\n              )}\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n        <div>\n        <div className=\"high-Score\">High Score - {this.state.highScore}</div>\n        <div className=\"current-Score\">Current Score - {this.state.currentScore}</div>\n       </div>\n      </div>\n    )\n  }\n}\n\nexport default AlbersUSA","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}